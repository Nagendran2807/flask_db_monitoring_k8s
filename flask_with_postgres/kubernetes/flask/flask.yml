apiVersion: v1
kind: Service
metadata:
  name: flask-service
  labels:
    env: dev
    app: flask
spec:
  type: NodePort
  ports:
   - protocol: TCP
     port: 8000
     targetPort: 5000
  selector:
   app: flask


---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: flask
  labels:
    env: dev
    app: flask
spec:
  replicas: 1
  selector:
    matchLabels:
      app: flask
  template:
    metadata:
      labels:
        app: flask
    spec:
      containers:
        - name: flask
          image: crazy28/flask-kubernetes:1.0
          # image: python:3.8
          # command: [ "/bin/bash", "-c", "--" ]
          # args: [ "while true; do sleep 30; done;" ]
          # imagePullPolicy: "IfNotPresent"    
          ports:
            - containerPort: 5000
              name: flask
          resources:
            requests:
              cpu: "50m"
              memory: "128Mi"
            limits:
              cpu: "500m"
              memory: "128Mi"
          env:
            - name: SERVICE_POSTGRES_SERVICE_HOST
              value: postgres
            - name: FLASK_ENV
              value: development
            - name: POSTGRES_DB
              value: demo_db
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: postgres-credentials
                  key: user
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-credentials
                  key: password 
          # when the container can take traffic           
          readinessProbe:
            httpGet:
              path: /
              port: 5000
            periodSeconds: 10
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 5
          # when the container should be restarted
          livenessProbe:
            httpGet:
              path: /
              port: 5000
            initialDelaySeconds: 20
            periodSeconds: 20
            successThreshold: 1
            failureThreshold: 5

---
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: flask
  labels:
    app: flask
spec:
  maxReplicas: 5
  minReplicas: 2
  targetCPUUtilizationPercentage: 50
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: flask
